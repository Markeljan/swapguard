{
  "language": "Solidity",
  "sources": {
    "@flarenetwork/flare-periphery-contracts/flare/ftso/ftso/interface/IIFtso.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../genesis/interface/IFtsoGenesis.sol\";\nimport \"../../userInterfaces/IFtso.sol\";\nimport \"../../../util-contracts/token/token/interface/IIVPToken.sol\";\n\n\ninterface IIFtso is IFtso, IFtsoGenesis {\n\n    /// function finalizePriceReveal\n    /// called by reward manager only on correct timing.\n    /// if price reveal period for epoch x ended. finalize.\n    /// iterate list of price submissions\n    /// find weighted median\n    /// find adjucant 50% of price submissions.\n    /// Allocate reward for any price submission which is same as a \"winning\" submission\n    function finalizePriceEpoch(uint256 _epochId, bool _returnRewardData) external\n        returns(\n            address[] memory _eligibleAddresses,\n            uint256[] memory _natWeights,\n            uint256 _totalNatWeight\n        );\n\n    function fallbackFinalizePriceEpoch(uint256 _epochId) external;\n\n    function forceFinalizePriceEpoch(uint256 _epochId) external;\n\n    // activateFtso will be called by ftso manager once ftso is added \n    // before this is done, FTSO can't run\n    function activateFtso(\n        uint256 _firstEpochStartTs,\n        uint256 _submitPeriodSeconds,\n        uint256 _revealPeriodSeconds\n    ) external;\n\n    function deactivateFtso() external;\n\n    // update initial price and timestamp - only if not active\n    function updateInitialPrice(uint256 _initialPriceUSD, uint256 _initialPriceTimestamp) external;\n\n    function configureEpochs(\n        uint256 _maxVotePowerNatThresholdFraction,\n        uint256 _maxVotePowerAssetThresholdFraction,\n        uint256 _lowAssetUSDThreshold,\n        uint256 _highAssetUSDThreshold,\n        uint256 _highAssetTurnoutThresholdBIPS,\n        uint256 _lowNatTurnoutThresholdBIPS,\n        uint256 _elasticBandRewardBIPS,\n        uint256 _elasticBandWidthPPM,\n        address[] memory _trustedAddresses\n    ) external;\n\n    function setAsset(IIVPToken _asset) external;\n\n    function setAssetFtsos(IIFtso[] memory _assetFtsos) external;\n\n    // current vote power block will update per reward epoch. \n    // the FTSO doesn't have notion of reward epochs.\n    // reward manager only can set this data. \n    function setVotePowerBlock(uint256 _blockNumber) external;\n\n    function initializeCurrentEpochStateForReveal(uint256 _circulatingSupplyNat, bool _fallbackMode) external;\n  \n    /**\n     * @notice Returns ftso manager address\n     */\n    function ftsoManager() external view returns (address);\n\n    /**\n     * @notice Returns the FTSO asset\n     * @dev Asset is null in case of multi-asset FTSO\n     */\n    function getAsset() external view returns (IIVPToken);\n\n    /**\n     * @notice Returns the Asset FTSOs\n     * @dev AssetFtsos is not null only in case of multi-asset FTSO\n     */\n    function getAssetFtsos() external view returns (IIFtso[] memory);\n\n    /**\n     * @notice Returns current configuration of epoch state\n     * @return _maxVotePowerNatThresholdFraction        High threshold for native token vote power per voter\n     * @return _maxVotePowerAssetThresholdFraction      High threshold for asset vote power per voter\n     * @return _lowAssetUSDThreshold            Threshold for low asset vote power\n     * @return _highAssetUSDThreshold           Threshold for high asset vote power\n     * @return _highAssetTurnoutThresholdBIPS   Threshold for high asset turnout\n     * @return _lowNatTurnoutThresholdBIPS      Threshold for low nat turnout\n     * @return _elasticBandRewardBIPS           Hybrid reward band, where _elasticBandRewardBIPS goes to the \n        elastic band (prices within _elasticBandWidthPPM of the median) \n        and 10000 - elasticBandRewardBIPS to the IQR \n     * @return _elasticBandWidthPPM             Prices within _elasticBandWidthPPM of median are rewarded\n     * @return _trustedAddresses                Trusted addresses - use their prices if low nat turnout is not achieved\n     */\n    function epochsConfiguration() external view \n        returns (\n            uint256 _maxVotePowerNatThresholdFraction,\n            uint256 _maxVotePowerAssetThresholdFraction,\n            uint256 _lowAssetUSDThreshold,\n            uint256 _highAssetUSDThreshold,\n            uint256 _highAssetTurnoutThresholdBIPS,\n            uint256 _lowNatTurnoutThresholdBIPS,\n            uint256 _elasticBandRewardBIPS,\n            uint256 _elasticBandWidthPPM,\n            address[] memory _trustedAddresses\n        );\n\n    /**\n     * @notice Returns parameters necessary for approximately replicating vote weighting.\n     * @return _assets                  the list of Assets that are accounted in vote\n     * @return _assetMultipliers        weight of each asset in (multiasset) ftso, mutiplied by TERA\n     * @return _totalVotePowerNat       total native token vote power at block\n     * @return _totalVotePowerAsset     total combined asset vote power at block\n     * @return _assetWeightRatio        ratio of combined asset vp vs. native token vp (in BIPS)\n     * @return _votePowerBlock          vote powewr block for given epoch\n     */\n    function getVoteWeightingParameters() external view \n        returns (\n            IIVPToken[] memory _assets,\n            uint256[] memory _assetMultipliers,\n            uint256 _totalVotePowerNat,\n            uint256 _totalVotePowerAsset,\n            uint256 _assetWeightRatio,\n            uint256 _votePowerBlock\n        );\n\n    function wNat() external view returns (IIVPToken);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoGenesis.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n\ninterface IFtsoGenesis {\n\n    /**\n     * @notice Reveals submitted price during epoch reveal period - only price submitter\n     * @param _voter                Voter address\n     * @param _epochId              Id of the epoch in which the price hash was submitted\n     * @param _price                Submitted price in USD\n     * @notice The hash of _price and _random must be equal to the submitted hash\n     * @notice Emits PriceRevealed event\n     */\n    function revealPriceSubmitter(\n        address _voter,\n        uint256 _epochId,\n        uint256 _price,\n        uint256 _wNatVP\n    ) external;\n\n    /**\n     * @notice Get (and cache) wNat vote power for specified voter and given epoch id\n     * @param _voter                Voter address\n     * @param _epochId              Id of the epoch in which the price hash was submitted\n     * @return wNat vote power\n     */\n    function wNatVotePowerCached(address _voter, uint256 _epochId) external returns (uint256);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/ftso/genesis/interface/IFtsoRegistryGenesis.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"./IFtsoGenesis.sol\";\n\n\ninterface IFtsoRegistryGenesis {\n\n    function getFtsos(uint256[] memory _indices) external view returns(IFtsoGenesis[] memory _ftsos);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtso.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IFtso {\n    enum PriceFinalizationType {\n        // initial state\n        NOT_FINALIZED,\n        // median calculation used to find price\n        WEIGHTED_MEDIAN,\n        // low turnout - price calculated from median of trusted addresses\n        TRUSTED_ADDRESSES,\n        // low turnout + no votes from trusted addresses - price copied from previous epoch\n        PREVIOUS_PRICE_COPIED,\n        // price calculated from median of trusted addresses - triggered due to an exception\n        TRUSTED_ADDRESSES_EXCEPTION,\n        // previous price copied - triggered due to an exception\n        PREVIOUS_PRICE_COPIED_EXCEPTION\n    }\n\n    event PriceRevealed(\n        address indexed voter, uint256 indexed epochId, uint256 price, uint256 timestamp,\n        uint256 votePowerNat, uint256 votePowerAsset\n    );\n\n    event PriceFinalized(\n        uint256 indexed epochId, uint256 price, bool rewardedFtso,\n        uint256 lowIQRRewardPrice, uint256 highIQRRewardPrice,\n        uint256 lowElasticBandRewardPrice, uint256 highElasticBandRewardPrice, \n        PriceFinalizationType finalizationType, uint256 timestamp\n    );\n\n    event PriceEpochInitializedOnFtso(\n        uint256 indexed epochId, uint256 endTime, uint256 timestamp\n    );\n\n    event LowTurnout(\n        uint256 indexed epochId,\n        uint256 natTurnout,\n        uint256 lowNatTurnoutThresholdBIPS,\n        uint256 timestamp\n    );\n\n    /**\n     * @notice Returns if FTSO is active\n     */\n    function active() external view returns (bool);\n\n    /**\n     * @notice Returns the FTSO symbol\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @notice Returns current epoch id\n     */\n    function getCurrentEpochId() external view returns (uint256);\n\n    /**\n     * @notice Returns id of the epoch which was opened for price submission at the specified timestamp\n     * @param _timestamp            Timestamp as seconds from unix epoch\n     */\n    function getEpochId(uint256 _timestamp) external view returns (uint256);\n    \n    /**\n     * @notice Returns random number of the specified epoch\n     * @param _epochId              Id of the epoch\n     */\n    function getRandom(uint256 _epochId) external view returns (uint256);\n\n    /**\n     * @notice Returns asset price consented in specific epoch\n     * @param _epochId              Id of the epoch\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     */\n    function getEpochPrice(uint256 _epochId) external view returns (uint256);\n\n    /**\n     * @notice Returns current epoch data\n     * @return _epochId                 Current epoch id\n     * @return _epochSubmitEndTime      End time of the current epoch price submission as seconds from unix epoch\n     * @return _epochRevealEndTime      End time of the current epoch price reveal as seconds from unix epoch\n     * @return _votePowerBlock          Vote power block for the current epoch\n     * @return _fallbackMode            Current epoch in fallback mode - only votes from trusted addresses will be used\n     * @dev half-closed intervals - end time not included\n     */\n    function getPriceEpochData() external view returns (\n        uint256 _epochId,\n        uint256 _epochSubmitEndTime,\n        uint256 _epochRevealEndTime,\n        uint256 _votePowerBlock,\n        bool _fallbackMode\n    );\n\n    /**\n     * @notice Returns current epoch data\n     * @return _firstEpochStartTs           First epoch start timestamp\n     * @return _submitPeriodSeconds         Submit period in seconds\n     * @return _revealPeriodSeconds         Reveal period in seconds\n     */\n    function getPriceEpochConfiguration() external view returns (\n        uint256 _firstEpochStartTs,\n        uint256 _submitPeriodSeconds,\n        uint256 _revealPeriodSeconds\n    );\n    \n    /**\n     * @notice Returns asset price submitted by voter in specific epoch\n     * @param _epochId              Id of the epoch\n     * @param _voter                Address of the voter\n     * @return Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     */\n    function getEpochPriceForVoter(uint256 _epochId, address _voter) external view returns (uint256);\n\n    /**\n     * @notice Returns current asset price\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp           Time when price was updated for the last time\n     */\n    function getCurrentPrice() external view returns (uint256 _price, uint256 _timestamp);\n\n    /**\n     * @notice Returns current asset price and number of decimals\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp               Time when price was updated for the last time\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\n     */\n    function getCurrentPriceWithDecimals() external view returns (\n        uint256 _price,\n        uint256 _timestamp,\n        uint256 _assetPriceUsdDecimals\n    );\n    \n    /**\n     * @notice Returns current asset price calculated from trusted providers\n     * @return _price               Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp           Time when price was updated for the last time\n     */\n    function getCurrentPriceFromTrustedProviders() external view returns (uint256 _price, uint256 _timestamp);\n\n    /**\n     * @notice Returns current asset price calculated from trusted providers and number of decimals\n     * @return _price                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _timestamp               Time when price was updated for the last time\n     * @return _assetPriceUsdDecimals   Number of decimals used for USD price\n     */\n    function getCurrentPriceWithDecimalsFromTrustedProviders() external view returns (\n        uint256 _price,\n        uint256 _timestamp,\n        uint256 _assetPriceUsdDecimals\n    );\n\n    /**\n     * @notice Returns current asset price details\n     * @return _price                                   Price in USD multiplied by ASSET_PRICE_USD_DECIMALS\n     * @return _priceTimestamp                          Time when price was updated for the last time\n     * @return _priceFinalizationType                   Finalization type when price was updated for the last time\n     * @return _lastPriceEpochFinalizationTimestamp     Time when last price epoch was finalized\n     * @return _lastPriceEpochFinalizationType          Finalization type of last finalized price epoch\n     */\n    function getCurrentPriceDetails() external view returns (\n        uint256 _price,\n        uint256 _priceTimestamp,\n        PriceFinalizationType _priceFinalizationType,\n        uint256 _lastPriceEpochFinalizationTimestamp,\n        PriceFinalizationType _lastPriceEpochFinalizationType\n    );\n\n    /**\n     * @notice Returns current random number\n     */\n    function getCurrentRandom() external view returns (uint256);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\nimport \"../ftso/interface/IIFtso.sol\";\nimport \"../genesis/interface/IFtsoRegistryGenesis.sol\";\n\ninterface IFtsoRegistry is IFtsoRegistryGenesis {\n\n    struct PriceInfo {\n        uint256 ftsoIndex;\n        uint256 price;\n        uint256 decimals;\n        uint256 timestamp;\n    }\n\n    function getFtso(uint256 _ftsoIndex) external view returns(IIFtso _activeFtsoAddress);\n    function getFtsoBySymbol(string memory _symbol) external view returns(IIFtso _activeFtsoAddress);\n    function getSupportedIndices() external view returns(uint256[] memory _supportedIndices);\n    function getSupportedSymbols() external view returns(string[] memory _supportedSymbols);\n    function getSupportedFtsos() external view returns(IIFtso[] memory _ftsos);\n    function getFtsoIndex(string memory _symbol) external view returns (uint256 _assetIndex);\n    function getFtsoSymbol(uint256 _ftsoIndex) external view returns (string memory _symbol);\n    function getCurrentPrice(uint256 _ftsoIndex) external view returns(uint256 _price, uint256 _timestamp);\n    function getCurrentPrice(string memory _symbol) external view returns(uint256 _price, uint256 _timestamp);\n    function getCurrentPriceWithDecimals(uint256 _assetIndex) external view\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\n    function getCurrentPriceWithDecimals(string memory _symbol) external view\n        returns(uint256 _price, uint256 _timestamp, uint256 _assetPriceUsdDecimals);\n\n    function getAllCurrentPrices() external view returns (PriceInfo[] memory);\n    function getCurrentPricesByIndices(uint256[] memory _indices) external view returns (PriceInfo[] memory);\n    function getCurrentPricesBySymbols(string[] memory _symbols) external view returns (PriceInfo[] memory);\n\n    function getSupportedIndicesAndFtsos() external view \n        returns(uint256[] memory _supportedIndices, IIFtso[] memory _ftsos);\n\n    function getSupportedSymbolsAndFtsos() external view \n        returns(string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\n\n    function getSupportedIndicesAndSymbols() external view \n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols);\n\n    function getSupportedIndicesSymbolsAndFtsos() external view \n        returns(uint256[] memory _supportedIndices, string[] memory _supportedSymbols, IIFtso[] memory _ftsos);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/governance/userInterfaces/IGovernanceVotePower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Interface for contracts delegating their governance vote power.\n */\ninterface IGovernanceVotePower {\n    /**\n     * Delegates all governance vote power of `msg.sender` to address `_to`.\n     * @param _to The address of the recipient.\n     */\n    function delegate(address _to) external;\n\n    /**\n     * Undelegates all governance vote power of `msg.sender`.\n     */\n    function undelegate() external;\n\n    /**\n     * Gets the governance vote power of an address at a given block number, including\n     * all delegations made to it.\n     * @param _who The address being queried.\n     * @param _blockNumber The block number at which to fetch the vote power.\n     * @return Governance vote power of `_who` at `_blockNumber`.\n     */\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n     * Gets the governance vote power of an address at the latest block, including\n     * all delegations made to it.\n     * @param _who The address being queried.\n     * @return Governance vote power of `account` at the lastest block.\n     */\n    function getVotes(address _who) external view returns (uint256);\n\n    /**\n     * Gets the address an account is delegating its governance vote power to, at a given block number.\n     * @param _who The address being queried.\n     * @param _blockNumber The block number at which to fetch the address.\n     * @return Address where `_who` was delegating its governance vote power at block `_blockNumber`.\n     */\n    function getDelegateOfAt(address _who, uint256 _blockNumber) external view returns (address);\n\n    /**\n     * Gets the address an account is delegating its governance vote power to, at the latest block number.\n     * @param _who The address being queried.\n     * @return Address where `_who` is currently delegating its governance vote power.\n     */\n    function getDelegateOfAtNow(address _who) external view returns (address);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirror.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\nimport \"./IPChainVotePower.sol\";\nimport \"./IPChainStakeMirrorVerifier.sol\";\n\n\n/**\n * Interface for the `PChainStakeMirror` contract.\n */\ninterface IPChainStakeMirror is IPChainVotePower {\n\n    /**\n     * Event emitted when max updates per block is set.\n     * @param maxUpdatesPerBlock new number of max updated per block\n     */\n    event MaxUpdatesPerBlockSet(uint256 maxUpdatesPerBlock);\n\n    /**\n     * Event emitted when the stake is confirmed.\n     * @param owner The address who opened the stake.\n     * @param nodeId Node id to which the stake was added.\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\n     * @param amountWei Stake amount (in wei).\n     * @param pChainTxId P-chain transaction id.\n     */\n    event StakeConfirmed(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        bytes32 indexed txHash,\n        uint256 amountWei,\n        bytes32 pChainTxId\n    );\n\n    /**\n     * Event emitted when the stake has ended.\n     * @param owner The address whose stake has ended.\n     * @param nodeId Node id from which the stake was removed.\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\n     * @param amountWei Stake amount (in wei).\n     */\n    event StakeEnded(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        bytes32 indexed txHash,\n        uint256 amountWei\n    );\n\n    /**\n     * Event emitted when the stake was revoked.\n     * @param owner The address whose stake has ended.\n     * @param nodeId Node id from which the stake was removed.\n     * @param txHash Unique tx hash - keccak256(abi.encode(PChainStake.txId, PChainStake.inputAddress));\n     * @param amountWei Stake amount (in wei).\n     */\n    event StakeRevoked(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        bytes32 indexed txHash,\n        uint256 amountWei\n    );\n\n    /**\n     * Method for P-chain stake mirroring using `PChainStake` data and Merkle proof.\n     * @param _stakeData Information about P-chain stake.\n     * @param _merkleProof Merkle proof that should be used to prove the P-chain stake.\n     */\n    function mirrorStake(\n        IPChainStakeMirrorVerifier.PChainStake calldata _stakeData,\n        bytes32[] calldata _merkleProof\n    )\n        external;\n\n    /**\n     * Method for checking if active stake (stake start time <= block.timestamp < stake end time) was already mirrored.\n     * @param _txId P-chain stake transaction id.\n     * @param _inputAddress P-chain address that opened stake.\n     * @return True if stake is active and mirrored.\n     */\n    function isActiveStakeMirrored(bytes32 _txId, bytes20 _inputAddress) external view returns(bool);\n\n    /**\n     * Total amount of tokens at current block.\n     * @return The current total amount of tokens.\n     **/\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * Total amount of tokens at a specific `_blockNumber`.\n     * @param _blockNumber The block number when the totalSupply is queried.\n     * @return The total amount of tokens at `_blockNumber`.\n     **/\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\n\n    /**\n     * Queries the token balance of `_owner` at current block.\n     * @param _owner The address from which the balance will be retrieved.\n     * @return The current balance.\n     **/\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /**\n     * Queries the token balance of `_owner` at a specific `_blockNumber`.\n     * @param _owner The address from which the balance will be retrieved.\n     * @param _blockNumber The block number when the balance is queried.\n     * @return The balance at `_blockNumber`.\n     **/\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainStakeMirrorVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\n/**\n * Interface with structure for P-chain stake mirror verifications.\n */\ninterface IPChainStakeMirrorVerifier {\n\n    /**\n     * Structure describing the P-chain stake.\n     */\n    struct PChainStake {\n        // Hash of the transaction on the underlying chain.\n        bytes32 txId;\n        // Type of the staking/delegation transaction: '0' for 'ADD_VALIDATOR_TX' and '1' for 'ADD_DELEGATOR_TX'.\n        uint8 stakingType;\n        // Input address that triggered the staking or delegation transaction.\n        // See https://support.avax.network/en/articles/4596397-what-is-an-address for address definition for P-chain.\n        bytes20 inputAddress;\n        // NodeID to which staking or delegation is done.\n        // For definitions, see https://github.com/ava-labs/avalanchego/blob/master/ids/node_id.go.\n        bytes20 nodeId;\n        // Start time of the staking/delegation in seconds (Unix epoch).\n        uint64 startTime;\n        // End time of the staking/delegation in seconds (Unix epoch).\n        uint64 endTime;\n        // Staked or delegated amount in Gwei (nano FLR).\n        uint64 weight;\n    }\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/infrastructure/userInterfaces/IPChainVotePower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\n/**\n * Interface for the vote power part of the `PChainStakeMirror` contract.\n */\ninterface IPChainVotePower {\n\n    /**\n     * Event triggered when a stake is confirmed or at the time it ends.\n     * Definition: `votePowerFromTo(owner, nodeId)` is `changed` from `priorVotePower` to `newVotePower`.\n     * @param owner The account that has changed the amount of vote power it is staking.\n     * @param nodeId The node id whose received vote power has changed.\n     * @param priorVotePower The vote power originally on that node id.\n     * @param newVotePower The new vote power that triggered this event.\n     */\n    event VotePowerChanged(\n        address indexed owner,\n        bytes20 indexed nodeId,\n        uint256 priorVotePower,\n        uint256 newVotePower\n    );\n\n    /**\n     * Emitted when a vote power cache entry is created.\n     * Allows history cleaners to track vote power cache cleanup opportunities off-chain.\n     * @param nodeId The node id whose vote power has just been cached.\n     * @param blockNumber The block number at which the vote power has been cached.\n     */\n    event VotePowerCacheCreated(bytes20 nodeId, uint256 blockNumber);\n\n    /**\n    * Get the vote power of `_owner` at block `_blockNumber` using cache.\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.\n    * @param _owner The node id to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_owner` at `_blockNumber`.\n    */\n    function votePowerOfAtCached(bytes20 _owner, uint256 _blockNumber) external returns(uint256);\n\n    /**\n    * Get the total vote power at block `_blockNumber` using cache.\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.\n    * @param _blockNumber The block number at which to fetch.\n    * @return The total vote power at the block (sum of all accounts' vote powers).\n    */\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\n\n    /**\n     * Get the current total vote power.\n     * @return The current total vote power (sum of all accounts' vote powers).\n     */\n    function totalVotePower() external view returns(uint256);\n\n    /**\n    * Get the total vote power at block `_blockNumber`\n    * @param _blockNumber The block number at which to fetch.\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\n    */\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\n\n    /**\n     * Get the amounts and node ids being staked to by a vote power owner.\n     * @param _owner The address being queried.\n     * @return _nodeIds Array of node ids.\n     * @return _amounts Array of staked amounts, for each node id.\n     */\n    function stakesOf(address _owner)\n        external view\n        returns (\n            bytes20[] memory _nodeIds,\n            uint256[] memory _amounts\n        );\n\n    /**\n     * Get the amounts and node ids being staked to by a vote power owner,\n     * at a given block.\n     * @param _owner The address being queried.\n     * @param _blockNumber The block number being queried.\n     * @return _nodeIds Array of node ids.\n     * @return _amounts Array of staked amounts, for each node id.\n     */\n    function stakesOfAt(\n        address _owner,\n        uint256 _blockNumber\n    )\n        external view\n        returns (\n            bytes20[] memory _nodeIds,\n            uint256[] memory _amounts\n        );\n\n    /**\n     * Get the current vote power of `_nodeId`.\n     * @param _nodeId The node id to get voting power.\n     * @return Current vote power of `_nodeId`.\n     */\n    function votePowerOf(bytes20 _nodeId) external view returns(uint256);\n\n    /**\n    * Get the vote power of `_nodeId` at block `_blockNumber`\n    * @param _nodeId The node id to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_nodeId` at `_blockNumber`.\n    */\n    function votePowerOfAt(bytes20 _nodeId, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n    * Get current staked vote power from `_owner` staked to `_nodeId`.\n    * @param _owner Address of vote power owner.\n    * @param _nodeId Node id.\n    * @return The staked vote power.\n    */\n    function votePowerFromTo(address _owner, bytes20 _nodeId) external view returns(uint256);\n\n    /**\n    * Get current staked vote power from `_owner` staked to `_nodeId` at `_blockNumber`.\n    * @param _owner Address of vote power owner.\n    * @param _nodeId Node id.\n    * @param _blockNumber The block number at which to fetch.\n    * @return The staked vote power.\n    */\n    function votePowerFromToAt(address _owner, bytes20 _nodeId, uint _blockNumber) external view returns(uint256);\n\n    /**\n     * Return vote powers for several node ids in a batch.\n     * @param _nodeIds The list of node ids to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */\n    function batchVotePowerOfAt(\n        bytes20[] memory _nodeIds,\n        uint256 _blockNumber\n    ) external view returns(uint256[] memory);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IICleanable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IICleanable {\n    /**\n     * Set the contract that is allowed to call history cleaning methods.\n     */\n    function setCleanerContract(address _cleanerContract) external;\n    \n    /**\n     * Set the cleanup block number.\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased,\n     * history before that block should never be used since it can be inconsistent.\n     * In particular, cleanup block number must be before current vote power block.\n     * @param _blockNumber The new cleanup block number.\n     */\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\n    \n    /**\n     * Get the current cleanup block number.\n     */\n    function cleanupBlockNumber() external view returns (uint256);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIGovernanceVotePower.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../userInterfaces/IVPToken.sol\";\nimport \"../../../infrastructure/userInterfaces/IPChainStakeMirror.sol\";\nimport \"../../../../governance/userInterfaces/IGovernanceVotePower.sol\";\n\n/**\n * Internal interface for contracts delegating their governance vote power.\n */\ninterface IIGovernanceVotePower is IGovernanceVotePower {\n    /**\n     * Emitted when a delegate's vote power changes, as a result of a new delegation\n     * or a token transfer, for example.\n     *\n     * The event is always emitted from a `GovernanceVotePower` contract.\n     * @param delegate The account receiving the changing delegated vote power.\n     * @param previousBalance Delegated vote power before the change.\n     * @param newBalance Delegated vote power after the change.\n     */\n    event DelegateVotesChanged(\n        address indexed delegate,\n        uint256 previousBalance,\n        uint256 newBalance\n    );\n\n    /**\n     * Emitted when an account starts delegating vote power or switches its delegation\n     * to another address.\n     *\n     * The event is always emitted from a `GovernanceVotePower` contract.\n     * @param delegator Account delegating its vote power.\n     * @param fromDelegate Account receiving the delegation before the change.\n     * Can be address(0) if there was no previous delegation.\n     * @param toDelegate Account receiving the delegation after the change.\n     * Can be address(0) if `delegator` just undelegated all its vote power.\n     */\n    event DelegateChanged(\n        address indexed delegator,\n        address indexed fromDelegate,\n        address indexed toDelegate\n    );\n\n    /**\n     * Update governance vote power of all involved delegates after tokens are transferred.\n     *\n     * This function **MUST** be called after each governance token transfer for the\n     * delegates to reflect the correct balance.\n     * @param _from Source address of the transfer.\n     * @param _to Destination address of the transfer.\n     * @param _fromBalance _Ignored._\n     * @param _toBalance _Ignored._\n     * @param _amount Amount being transferred.\n     */\n    function updateAtTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _fromBalance,\n        uint256 _toBalance,\n        uint256 _amount\n    ) external;\n\n    /**\n     * Set the cleanup block number.\n     * Historic data for the blocks before `cleanupBlockNumber` can be erased.\n     * History before that block should never be used since it can be inconsistent.\n     * In particular, cleanup block number must be lower than the current vote power block.\n     * @param _blockNumber The new cleanup block number.\n     */\n    function setCleanupBlockNumber(uint256 _blockNumber) external;\n\n    /**\n     * Set the contract that is allowed to call history cleaning methods.\n     * @param _cleanerContract Address of the cleanup contract.\n     * Usually this will be an instance of `CleanupBlockNumberManager`.\n     */\n    function setCleanerContract(address _cleanerContract) external;\n\n    /**\n     * Get the token that this governance vote power contract belongs to.\n     * @return The IVPToken interface owning this contract.\n     */\n    function ownerToken() external view returns (IVPToken);\n\n    /**\n     * Get the stake mirror contract that this governance vote power contract belongs to.\n     * @return The IPChainStakeMirror interface owning this contract.\n     */\n    function pChainStakeMirror() external view returns (IPChainStakeMirror);\n\n    /**\n     * Get the current cleanup block number set with `setCleanupBlockNumber()`.\n     * @return The currently set cleanup block number.\n     */\n    function getCleanupBlockNumber() external view returns(uint256);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../userInterfaces/IVPToken.sol\";\nimport \"../../userInterfaces/IVPContractEvents.sol\";\nimport \"./IICleanable.sol\";\n\ninterface IIVPContract is IICleanable, IVPContractEvents {\n    /**\n     * Update vote powers when tokens are transfered.\n     * Also update delegated vote powers for percentage delegation\n     * and check for enough funds for explicit delegations.\n     **/\n    function updateAtTokenTransfer(\n        address _from, \n        address _to, \n        uint256 _fromBalance,\n        uint256 _toBalance,\n        uint256 _amount\n    ) external;\n\n    /**\n     * @notice Delegate `_bips` percentage of voting power to `_to` from `_from`\n     * @param _from The address of the delegator\n     * @param _to The address of the recipient\n     * @param _balance The delegator's current balance\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Not cumulative - every call resets the delegation value (and value of 0 revokes delegation).\n     **/\n    function delegate(\n        address _from, \n        address _to, \n        uint256 _balance, \n        uint256 _bips\n    ) external;\n    \n    /**\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n     * @param _from The address of the delegator\n     * @param _to The address of the recipient\n     * @param _balance The delegator's current balance\n     * @param _amount An explicit vote power amount to be delegated.\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/    \n    function delegateExplicit(\n        address _from, \n        address _to, \n        uint256 _balance, \n        uint _amount\n    ) external;    \n\n    /**\n     * @notice Revoke all delegation from sender to `_who` at given block. \n     *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n     *    Block `_blockNumber` must be in the past. \n     *    This method should be used only to prevent rogue delegate voting in the current voting block.\n     *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n     * @param _from The address of the delegator\n     * @param _who Address of the delegatee\n     * @param _balance The delegator's current balance\n     * @param _blockNumber The block number at which to revoke delegation.\n     **/\n    function revokeDelegationAt(\n        address _from, \n        address _who, \n        uint256 _balance,\n        uint _blockNumber\n    ) external;\n    \n        /**\n     * @notice Undelegate all voting power for delegates of `msg.sender`\n     *    Can only be used with percentage delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _from The address of the delegator\n     **/\n    function undelegateAll(\n        address _from,\n        uint256 _balance\n    ) external;\n    \n    /**\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n     *    Can only be used with explicit delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _from The address of the delegator\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \n     *   so the caller must supply them.\n     * @return The amount still delegated (in case the list of delegates was incomplete).\n     */\n    function undelegateAllExplicit(\n        address _from, \n        address[] memory _delegateAddresses\n    ) external returns (uint256);\n    \n    /**\n    * @notice Get the vote power of `_who` at block `_blockNumber`\n    *   Reads/updates cache and upholds revocations.\n    * @param _who The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_who` at `_blockNumber`.\n    */\n    function votePowerOfAtCached(address _who, uint256 _blockNumber) external returns(uint256);\n    \n    /**\n     * @notice Get the current vote power of `_who`.\n     * @param _who The address to get voting power.\n     * @return Current vote power of `_who`.\n     */\n    function votePowerOf(address _who) external view returns(uint256);\n    \n    /**\n    * @notice Get the vote power of `_who` at block `_blockNumber`\n    * @param _who The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_who` at `_blockNumber`.\n    */\n    function votePowerOfAt(address _who, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n    * @notice Get the vote power of `_who` at block `_blockNumber`, ignoring revocation information (and cache).\n    * @param _who The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_who` at `_blockNumber`. Result doesn't change if vote power is revoked.\n    */\n    function votePowerOfAtIgnoringRevocation(address _who, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n     * Return vote powers for several addresses in a batch.\n     * @param _owners The list of addresses to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */    \n    function batchVotePowerOfAt(\n        address[] memory _owners, \n        uint256 _blockNumber\n    )\n        external view returns(uint256[] memory);\n\n    /**\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @param _balance The delegator's current balance\n    * @return The delegated vote power.\n    */\n    function votePowerFromTo(\n        address _from, \n        address _to, \n        uint256 _balance\n    ) external view returns(uint256);\n    \n    /**\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @param _balance The delegator's current balance\n    * @param _blockNumber The block number at which to fetch.\n    * @return The delegated vote power.\n    */\n    function votePowerFromToAt(\n        address _from, \n        address _to, \n        uint256 _balance,\n        uint _blockNumber\n    ) external view returns(uint256);\n\n    /**\n     * @notice Compute the current undelegated vote power of `_owner`\n     * @param _owner The address to get undelegated voting power.\n     * @param _balance Owner's current balance\n     * @return The unallocated vote power of `_owner`\n     */\n    function undelegatedVotePowerOf(\n        address _owner,\n        uint256 _balance\n    ) external view returns(uint256);\n\n    /**\n     * @notice Get the undelegated vote power of `_owner` at given block.\n     * @param _owner The address to get undelegated voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\n     */\n    function undelegatedVotePowerOfAt(\n        address _owner, \n        uint256 _balance,\n        uint256 _blockNumber\n    ) external view returns(uint256);\n\n    /**\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n     *  allocated by percentage or by explicit value.\n     * @param _who The address to get delegation mode.\n     * @return Delegation mode (NOTSET=0, PERCENTAGE=1, AMOUNT=2))\n     */\n    function delegationModeOf(address _who) external view returns (uint256);\n    \n    /**\n    * @notice Get the vote power delegation `_delegateAddresses` \n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n    * @param _owner The address to get delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOf(\n        address _owner\n    )\n        external view \n        returns (\n            address[] memory _delegateAddresses, \n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n    * @notice Get the vote power delegation `delegationAddresses` \n    *  and `pcts` of an `_owner`. Returned in two separate positional arrays.\n    * @param _owner The address to get delegations.\n    * @param _blockNumber The block for which we want to know the delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOfAt(\n        address _owner,\n        uint256 _blockNumber\n    )\n        external view \n        returns (\n            address[] memory _delegateAddresses, \n            uint256[] memory _bips,\n            uint256 _count,\n            uint256 _delegationMode\n        );\n\n    /**\n     * The VPToken (or some other contract) that owns this VPContract.\n     * All state changing methods may be called only from this address.\n     * This is because original msg.sender is sent in `_from` parameter\n     * and we must be sure that it cannot be faked by directly calling VPContract.\n     * Owner token is also used in case of replacement to recover vote powers from balances.\n     */\n    function ownerToken() external view returns (IVPToken);\n    \n    /**\n     * Return true if this IIVPContract is configured to be used as a replacement for other contract.\n     * It means that vote powers are not necessarily correct at the initialization, therefore\n     * every method that reads vote power must check whether it is initialized for that address and block.\n     */\n    function isReplacement() external view returns (bool);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/token/interface/IIVPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport \"../../userInterfaces/IVPToken.sol\";\nimport \"../../../../governance/userInterfaces/IGovernanceVotePower.sol\";\nimport \"./IIVPContract.sol\";\nimport \"./IIGovernanceVotePower.sol\";\nimport \"./IICleanable.sol\";\n\ninterface IIVPToken is IVPToken, IICleanable {\n    /**\n     * Set the contract that is allowed to set cleanupBlockNumber.\n     * Usually this will be an instance of CleanupBlockNumberManager.\n     */\n    function setCleanupBlockNumberManager(address _cleanupBlockNumberManager) external;\n    \n    /**\n     * Sets new governance vote power contract that allows token owners to participate in governance voting\n     * and delegate governance vote power. \n     */\n    function setGovernanceVotePower(IIGovernanceVotePower _governanceVotePower) external;\n    \n    /**\n    * @notice Get the total vote power at block `_blockNumber` using cache.\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n    *   Can only be used if `_blockNumber` is in the past, otherwise reverts.    \n    * @param _blockNumber The block number at which to fetch.\n    * @return The total vote power at the block (sum of all accounts' vote powers).\n    */\n    function totalVotePowerAtCached(uint256 _blockNumber) external returns(uint256);\n    \n    /**\n    * @notice Get the vote power of `_owner` at block `_blockNumber` using cache.\n    *   It tries to read the cached value and if not found, reads the actual value and stores it in cache.\n    *   Can only be used if _blockNumber is in the past, otherwise reverts.    \n    * @param _owner The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_owner` at `_blockNumber`.\n    */\n    function votePowerOfAtCached(address _owner, uint256 _blockNumber) external returns(uint256);\n\n    /**\n     * Return vote powers for several addresses in a batch.\n     * @param _owners The list of addresses to fetch vote power of.\n     * @param _blockNumber The block number at which to fetch.\n     * @return A list of vote powers.\n     */    \n    function batchVotePowerOfAt(\n        address[] memory _owners, \n        uint256 _blockNumber\n    ) external view returns(uint256[] memory);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPContractEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\ninterface IVPContractEvents {\n    /**\n     * Event triggered when an account delegates or undelegates another account. \n     * Definition: `votePowerFromTo(from, to)` is `changed` from `priorVotePower` to `newVotePower`.\n     * For undelegation, `newVotePower` is 0.\n     *\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract`.\n     */\n    event Delegate(address indexed from, address indexed to, uint256 priorVotePower, uint256 newVotePower);\n    \n    /**\n     * Event triggered only when account `delegator` revokes delegation to `delegatee`\n     * for a single block in the past (typically the current vote block).\n     *\n     * Note: the event is always emitted from VPToken's `writeVotePowerContract` and/or `readVotePowerContract`.\n     */\n    event Revoke(address indexed delegator, address indexed delegatee, uint256 votePower, uint256 blockNumber);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/token/userInterfaces/IVPToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../../governance/userInterfaces/IGovernanceVotePower.sol\";\nimport \"./IVPContractEvents.sol\";\n\ninterface IVPToken is IERC20 {\n    /**\n     * @notice Delegate by percentage `_bips` of voting power to `_to` from `msg.sender`.\n     * @param _to The address of the recipient\n     * @param _bips The percentage of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/\n    function delegate(address _to, uint256 _bips) external;\n    \n    /**\n     * @notice Undelegate all percentage delegations from the sender and then delegate corresponding \n     *   `_bips` percentage of voting power from the sender to each member of `_delegatees`.\n     * @param _delegatees The addresses of the new recipients.\n     * @param _bips The percentages of voting power to be delegated expressed in basis points (1/100 of one percent).\n     *   Total of all `_bips` values must be at most 10000.\n     **/\n    function batchDelegate(address[] memory _delegatees, uint256[] memory _bips) external;\n        \n    /**\n     * @notice Explicitly delegate `_amount` of voting power to `_to` from `msg.sender`.\n     * @param _to The address of the recipient\n     * @param _amount An explicit vote power amount to be delegated.\n     *   Not cumulative - every call resets the delegation value (and value of 0 undelegates `to`).\n     **/    \n    function delegateExplicit(address _to, uint _amount) external;\n\n    /**\n    * @notice Revoke all delegation from sender to `_who` at given block. \n    *    Only affects the reads via `votePowerOfAtCached()` in the block `_blockNumber`.\n    *    Block `_blockNumber` must be in the past. \n    *    This method should be used only to prevent rogue delegate voting in the current voting block.\n    *    To stop delegating use delegate/delegateExplicit with value of 0 or undelegateAll/undelegateAllExplicit.\n    * @param _who Address of the delegatee\n    * @param _blockNumber The block number at which to revoke delegation.\n    */\n    function revokeDelegationAt(address _who, uint _blockNumber) external;\n    \n    /**\n     * @notice Undelegate all voting power for delegates of `msg.sender`\n     *    Can only be used with percentage delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     **/\n    function undelegateAll() external;\n    \n    /**\n     * @notice Undelegate all explicit vote power by amount delegates for `msg.sender`.\n     *    Can only be used with explicit delegation.\n     *    Does not reset delegation mode back to NOTSET.\n     * @param _delegateAddresses Explicit delegation does not store delegatees' addresses, \n     *   so the caller must supply them.\n     * @return The amount still delegated (in case the list of delegates was incomplete).\n     */\n    function undelegateAllExplicit(address[] memory _delegateAddresses) external returns (uint256);\n\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Should be compatible with ERC20 method\n     */\n    function decimals() external view returns (uint8);\n    \n\n    /**\n     * @notice Total amount of tokens at a specific `_blockNumber`.\n     * @param _blockNumber The block number when the totalSupply is queried\n     * @return The total amount of tokens at `_blockNumber`\n     **/\n    function totalSupplyAt(uint _blockNumber) external view returns(uint256);\n\n    /**\n     * @dev Queries the token balance of `_owner` at a specific `_blockNumber`.\n     * @param _owner The address from which the balance will be retrieved.\n     * @param _blockNumber The block number when the balance is queried.\n     * @return The balance at `_blockNumber`.\n     **/\n    function balanceOfAt(address _owner, uint _blockNumber) external view returns (uint256);\n\n    \n    /**\n     * @notice Get the current total vote power.\n     * @return The current total vote power (sum of all accounts' vote powers).\n     */\n    function totalVotePower() external view returns(uint256);\n    \n    /**\n    * @notice Get the total vote power at block `_blockNumber`\n    * @param _blockNumber The block number at which to fetch.\n    * @return The total vote power at the block  (sum of all accounts' vote powers).\n    */\n    function totalVotePowerAt(uint _blockNumber) external view returns(uint256);\n\n    /**\n     * @notice Get the current vote power of `_owner`.\n     * @param _owner The address to get voting power.\n     * @return Current vote power of `_owner`.\n     */\n    function votePowerOf(address _owner) external view returns(uint256);\n    \n    /**\n    * @notice Get the vote power of `_owner` at block `_blockNumber`\n    * @param _owner The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_owner` at `_blockNumber`.\n    */\n    function votePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n    * @notice Get the vote power of `_owner` at block `_blockNumber`, ignoring revocation information (and cache).\n    * @param _owner The address to get voting power.\n    * @param _blockNumber The block number at which to fetch.\n    * @return Vote power of `_owner` at `_blockNumber`. Result doesn't change if vote power is revoked.\n    */\n    function votePowerOfAtIgnoringRevocation(address _owner, uint256 _blockNumber) external view returns(uint256);\n\n    /**\n     * @notice Get the delegation mode for '_who'. This mode determines whether vote power is\n     *  allocated by percentage or by explicit value. Once the delegation mode is set, \n     *  it never changes, even if all delegations are removed.\n     * @param _who The address to get delegation mode.\n     * @return delegation mode: 0 = NOTSET, 1 = PERCENTAGE, 2 = AMOUNT (i.e. explicit)\n     */\n    function delegationModeOf(address _who) external view returns(uint256);\n        \n    /**\n    * @notice Get current delegated vote power `_from` delegator delegated `_to` delegatee.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @return The delegated vote power.\n    */\n    function votePowerFromTo(address _from, address _to) external view returns(uint256);\n    \n    /**\n    * @notice Get delegated the vote power `_from` delegator delegated `_to` delegatee at `_blockNumber`.\n    * @param _from Address of delegator\n    * @param _to Address of delegatee\n    * @param _blockNumber The block number at which to fetch.\n    * @return The delegated vote power.\n    */\n    function votePowerFromToAt(address _from, address _to, uint _blockNumber) external view returns(uint256);\n    \n    /**\n     * @notice Compute the current undelegated vote power of `_owner`\n     * @param _owner The address to get undelegated voting power.\n     * @return The unallocated vote power of `_owner`\n     */\n    function undelegatedVotePowerOf(address _owner) external view returns(uint256);\n    \n    /**\n     * @notice Get the undelegated vote power of `_owner` at given block.\n     * @param _owner The address to get undelegated voting power.\n     * @param _blockNumber The block number at which to fetch.\n     * @return The undelegated vote power of `_owner` (= owner's own balance minus all delegations from owner)\n     */\n    function undelegatedVotePowerOfAt(address _owner, uint256 _blockNumber) external view returns(uint256);\n    \n    /**\n    * @notice Get the vote power delegation `delegationAddresses` \n    *  and `_bips` of `_who`. Returned in two separate positional arrays.\n    * @param _who The address to get delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOf(address _who)\n        external view \n        returns (\n            address[] memory _delegateAddresses,\n            uint256[] memory _bips,\n            uint256 _count, \n            uint256 _delegationMode\n        );\n        \n    /**\n    * @notice Get the vote power delegation `delegationAddresses` \n    *  and `pcts` of `_who`. Returned in two separate positional arrays.\n    * @param _who The address to get delegations.\n    * @param _blockNumber The block for which we want to know the delegations.\n    * @return _delegateAddresses Positional array of delegation addresses.\n    * @return _bips Positional array of delegation percents specified in basis points (1/100 or 1 percent)\n    * @return _count The number of delegates.\n    * @return _delegationMode The mode of the delegation (NOTSET=0, PERCENTAGE=1, AMOUNT=2).\n    */\n    function delegatesOfAt(address _who, uint256 _blockNumber)\n        external view \n        returns (\n            address[] memory _delegateAddresses, \n            uint256[] memory _bips, \n            uint256 _count, \n            uint256 _delegationMode\n        );\n\n    /**\n     * Returns VPContract used for readonly operations (view methods).\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\n     *\n     * @notice `readVotePowerContract` is almost always equal to `writeVotePowerContract`\n     * except during upgrade from one VPContract to a new version (which should happen\n     * rarely or never and will be anounced before).\n     *\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\n     * via VPToken (and state changing methods are forbidden from direct calls). \n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\n     * for listening to events (`Revoke` only).\n     */\n    function readVotePowerContract() external view returns (IVPContractEvents);\n\n    /**\n     * Returns VPContract used for state changing operations (non-view methods).\n     * The only non-view method that might be called on it is `revokeDelegationAt`.\n     *\n     * @notice `writeVotePowerContract` is almost always equal to `readVotePowerContract`\n     * except during upgrade from one VPContract to a new version (which should happen\n     * rarely or never and will be anounced before). In the case of upgrade,\n     * `writeVotePowerContract` will be replaced first to establish delegations, and\n     * after some perio (e.g. after a reward epoch ends) `readVotePowerContract` will be set equal to it.\n     *\n     * @notice You shouldn't call any methods on VPContract directly, all are exposed\n     * via VPToken (and state changing methods are forbidden from direct calls). \n     * This is the reason why this method returns `IVPContractEvents` - it should only be used\n     * for listening to events (`Delegate` and `Revoke` only).\n     */\n    function writeVotePowerContract() external view returns (IVPContractEvents);\n    \n    /**\n     * When set, allows token owners to participate in governance voting\n     * and delegate governance vote power.\n     */\n    function governanceVotePower() external view returns (IGovernanceVotePower);\n}\n"
    },
    "@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.6 <0.9;\npragma abicoder v2;\n\ninterface IFlareContractRegistry {\n    /**\n     * @notice Returns contract address for the given name - might be address(0)\n     * @param _name             name of the contract\n     */\n    function getContractAddressByName(string calldata _name) external view returns(address);\n\n    /**\n     * @notice Returns contract address for the given name hash - might be address(0)\n     * @param _nameHash         hash of the contract name (keccak256(abi.encode(name))\n     */\n    function getContractAddressByHash(bytes32 _nameHash) external view returns(address);\n\n    /**\n     * @notice Returns contract addresses for the given names - might be address(0)\n     * @param _names            names of the contracts\n     */\n    function getContractAddressesByName(string[] calldata _names) external view returns(address[] memory);\n\n    /**\n     * @notice Returns contract addresses for the given name hashes - might be address(0)\n     * @param _nameHashes       hashes of the contract names (keccak256(abi.encode(name))\n     */\n    function getContractAddressesByHash(bytes32[] calldata _nameHashes) external view returns(address[] memory);\n\n    /**\n     * @notice Returns all contract names and corresponding addresses\n     */\n    function getAllContracts() external view returns(string[] memory _names, address[] memory _addresses);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/DEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract DEX is ERC20 {\n    address public token;\n\n    constructor (address _token) ERC20( name(), symbol()) {\n        token = _token;\n    }\n\n    function getTokensInContract() public view returns (uint256) {\n        return ERC20(token).balanceOf(address(this));\n    }\n\n    function addLiquidity(uint256 _amount) public payable returns (uint256) {\n        uint256 _liquidity;\n        uint256 balanceInEth = address(this).balance;\n        uint256 tokenReserve = getTokensInContract();\n        ERC20 _token = ERC20(token);\n\n        if (tokenReserve == 0) {\n            _token.transferFrom(msg.sender, address(this), _amount);\n            _liquidity = balanceInEth;\n            _mint(msg.sender, _amount);\n        }\n        else {\n            uint256 reservedEth = balanceInEth - msg.value;\n            require(\n            _amount >= (msg.value * tokenReserve) / reservedEth,\n            \"Amount of tokens sent is less than the minimum tokens required\"\n            );\n            _token.transferFrom(msg.sender, address(this), _amount);\n        unchecked {\n            _liquidity = (totalSupply() * msg.value) / reservedEth;\n        }\n        _mint(msg.sender, _liquidity);\n        }\n        return _liquidity;\n    }\n\n    function removeLiquidity(uint256 _amount) public returns (uint256, uint256) {\n        require(\n            _amount > 0, \"Amount should be greater than zero\"\n        );\n        uint256 _reservedEth = address(this).balance;\n        uint256 _totalSupply = totalSupply();\n\n        uint256 _ethAmount = (_reservedEth * _amount) / totalSupply();\n        uint256 _tokenAmount = (getTokensInContract() * _amount) / _totalSupply;\n        _burn(msg.sender, _amount);\n        payable(msg.sender).transfer(_ethAmount);\n        ERC20(token).transfer(msg.sender ,_tokenAmount);\n        return (_ethAmount, _tokenAmount);\n    }\n\n    function getAmountOfTokens(\n        uint256 inputAmount,\n        uint256 inputReserve,\n        uint256 outputReserve\n    )\n    public pure returns (uint256) \n    {\n        require(inputReserve > 0 && outputReserve > 0, \"Invalid Reserves\");\n        // We are charging a fee of `1%`\n        // uint256 inputAmountWithFee = inputAmount * 99;\n        uint256 inputAmountWithFee = inputAmount;\n        uint256 numerator = inputAmountWithFee * outputReserve;\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\n        unchecked {\n            return numerator / denominator;\n        }\n    }\n\n    function swapEthTotoken() public payable {\n        uint256 _reservedTokens = getTokensInContract();\n        uint256 _tokensBought = getAmountOfTokens(\n            msg.value, \n            address(this).balance, \n            _reservedTokens\n        );\n        ERC20(token).transfer(msg.sender, _tokensBought);\n    }\n\n    function swapTokenToEth(uint256 _tokensSold) public {\n        uint256 _reservedTokens = getTokensInContract();\n        uint256 ethBought = getAmountOfTokens(\n            _tokensSold,\n            _reservedTokens,\n            address(this).balance\n        );\n        ERC20(token).transferFrom(\n            msg.sender, \n            address(this), \n            _tokensSold\n        );\n        payable(msg.sender).transfer(ethBought);\n    }\n    \n}"
    },
    "contracts/MultiDEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MultiDEX {\n    struct TokenInfo {\n        address token;\n        uint256 liquidity;\n    }\n    \n    mapping(address => TokenInfo) public tokenInfoMap;\n    address[] public supportedTokens;\n    address public owner;\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not the owner\");\n        _;\n    }\n    \n    function addSupportedToken(address _token) public onlyOwner {\n        require(tokenInfoMap[_token].token == address(0), \"Token already supported\");\n        supportedTokens.push(_token);\n        tokenInfoMap[_token] = TokenInfo(_token, 0);\n    }\n    \n    function getTokensInContract(address _token) public view returns (uint256) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n    \n    function addLiquidity(address _token, uint256 _amount) public payable returns (uint256) {\n        require(tokenInfoMap[_token].token != address(0), \"Token not supported\");\n        \n        TokenInfo storage tokenInfo = tokenInfoMap[_token];\n        \n        uint256 _liquidity;\n        uint256 balanceInEth = address(this).balance;\n        uint256 tokenReserve = getTokensInContract(_token);\n        IERC20 _tokenContract = IERC20(_token);\n        \n        if (tokenReserve == 0) {\n            _tokenContract.transferFrom(msg.sender, address(this), _amount);\n            _liquidity = balanceInEth;\n        }\n        else {\n            uint256 reservedEth = balanceInEth - msg.value;\n            require(\n                _amount >= (msg.value * tokenReserve) / reservedEth,\n                \"Amount of tokens sent is less than the minimum tokens required\"\n            );\n            _tokenContract.transferFrom(msg.sender, address(this), _amount);\n            unchecked {\n                _liquidity = (tokenInfo.liquidity * msg.value) / reservedEth;\n            }\n        }\n        \n        tokenInfo.liquidity += _liquidity;\n        \n        return _liquidity;\n    }\n    \n    function removeLiquidity(address _token, uint256 _amount) public returns (uint256, uint256) {\n        require(\n            _amount > 0, \"Amount should be greater than zero\"\n        );\n        require(tokenInfoMap[_token].token != address(0), \"Token not supported\");\n        \n        TokenInfo storage tokenInfo = tokenInfoMap[_token];\n        \n        uint256 _reservedEth = address(this).balance;\n        uint256 _totalLiquidity = tokenInfo.liquidity;\n\n        uint256 _ethAmount = (_reservedEth * _amount) / _totalLiquidity;\n        uint256 _tokenAmount = (getTokensInContract(_token) * _amount) / _totalLiquidity;\n        \n        tokenInfo.liquidity -= _amount;\n        \n        payable(msg.sender).transfer(_ethAmount);\n        IERC20(_token).transfer(msg.sender ,_tokenAmount);\n        \n        return (_ethAmount, _tokenAmount);\n    }\n    \n    function getAmountOfTokens(\n        uint256 inputAmount,\n        uint256 inputReserve,\n        uint256 outputReserve\n    )\n    public pure returns (uint256) \n    {\n        require(inputReserve > 0 && outputReserve > 0, \"Invalid Reserves\");\n        uint256 inputAmountWithFee = inputAmount;\n        uint256 numerator = inputAmountWithFee * outputReserve;\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\n        unchecked {\n            return numerator / denominator;\n        }\n    }\n    \n    function swapEthTotoken(address _token) public payable {\n        require(tokenInfoMap[_token].token != address(0), \"Token not supported\");\n        \n        uint256 _reservedTokens = getTokensInContract(_token);\n        uint256 _tokensBought = getAmountOfTokens(\n            msg.value, \n            address(this).balance, \n            _reservedTokens\n        );\n        IERC20(_token).transfer(msg.sender, _tokensBought);\n    }\n    \n    function swapTokenToEth(address _token, uint256 _tokensSold) public {\n        require(tokenInfoMap[_token].token != address(0), \"Token not supported\");\n        \n        uint256 _reservedTokens = getTokensInContract(_token);\n        uint256 ethBought = getAmountOfTokens(\n            _tokensSold,\n            _reservedTokens,\n            address(this).balance\n        );\n        IERC20(_token).transferFrom(\n            msg.sender, \n            address(this), \n            _tokensSold\n        );\n        payable(msg.sender).transfer(ethBought);\n    }\n}\n"
    },
    "contracts/SwapGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// 1. Import dependencies\nimport \"@flarenetwork/flare-periphery-contracts/flare/util-contracts/userInterfaces/IFlareContractRegistry.sol\";\nimport \"@flarenetwork/flare-periphery-contracts/flare/ftso/userInterfaces/IFtsoRegistry.sol\";\n\ncontract SwapGuard {\n\n    address private constant FLARE_CONTRACT_REGISTRY =\n        0xaD67FE66660Fb8dFE9d6b1b4240d8650e30F6019;\n    function getTokenPriceWei(\n        string memory _symbol\n    ) public view returns(\n        uint256 _price, uint256 _timestamp, uint256 _decimals)\n    {\n        // 2. Access the Contract Registry\n        IFlareContractRegistry contractRegistry = IFlareContractRegistry(\n            FLARE_CONTRACT_REGISTRY);\n\n        // 3. Retrieve the FTSO Registry\n        IFtsoRegistry ftsoRegistry = IFtsoRegistry(\n            contractRegistry.getContractAddressByName('FtsoRegistry'));\n\n        // 4. Get latest price\n        (_price, _timestamp, _decimals) =\n            ftsoRegistry.getCurrentPriceWithDecimals(_symbol);\n    }\n\n}\n"
    },
    "contracts/YourContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\n// Useful for debugging. Remove when deploying to a live network.\nimport \"hardhat/console.sol\";\n\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * A smart contract that allows changing a state variable of the contract and tracking the changes\n * It also allows the owner to withdraw the Ether in the contract\n * @author BuidlGuidl\n */\ncontract YourContract {\n\t// State Variables\n\taddress public immutable owner;\n\tstring public greeting = \"Building Unstoppable Apps!!!\";\n\tbool public premium = false;\n\tuint256 public totalCounter = 0;\n\tmapping(address => uint) public userGreetingCounter;\n\n\t// Events: a way to emit log statements from smart contract that can be listened to by external parties\n\tevent GreetingChange(\n\t\taddress indexed greetingSetter,\n\t\tstring newGreeting,\n\t\tbool premium,\n\t\tuint256 value\n\t);\n\n\t// Constructor: Called once on contract deployment\n\t// Check packages/hardhat/deploy/00_deploy_your_contract.ts\n\tconstructor(address _owner) {\n\t\towner = _owner;\n\t}\n\n\t// Modifier: used to define a set of rules that must be met before or after a function is executed\n\t// Check the withdraw() function\n\tmodifier isOwner() {\n\t\t// msg.sender: predefined variable that represents address of the account that called the current function\n\t\trequire(msg.sender == owner, \"Not the Owner\");\n\t\t_;\n\t}\n\n\t/**\n\t * Function that allows anyone to change the state variable \"greeting\" of the contract and increase the counters\n\t *\n\t * @param _newGreeting (string memory) - new greeting to save on the contract\n\t */\n\tfunction setGreeting(string memory _newGreeting) public payable {\n\t\t// Print data to the hardhat chain console. Remove when deploying to a live network.\n\t\tconsole.log(\n\t\t\t\"Setting new greeting '%s' from %s\",\n\t\t\t_newGreeting,\n\t\t\tmsg.sender\n\t\t);\n\n\t\t// Change state variables\n\t\tgreeting = _newGreeting;\n\t\ttotalCounter += 1;\n\t\tuserGreetingCounter[msg.sender] += 1;\n\n\t\t// msg.value: built-in global variable that represents the amount of ether sent with the transaction\n\t\tif (msg.value > 0) {\n\t\t\tpremium = true;\n\t\t} else {\n\t\t\tpremium = false;\n\t\t}\n\n\t\t// emit: keyword used to trigger an event\n\t\temit GreetingChange(msg.sender, _newGreeting, msg.value > 0, 0);\n\t}\n\n\t/**\n\t * Function that allows the owner to withdraw all the Ether in the contract\n\t * The function can only be called by the owner of the contract as defined by the isOwner modifier\n\t */\n\tfunction withdraw() public isOwner {\n\t\t(bool success, ) = owner.call{ value: address(this).balance }(\"\");\n\t\trequire(success, \"Failed to send Ether\");\n\t}\n\n\t/**\n\t * Function that allows the contract to receive ETH\n\t */\n\treceive() external payable {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "evmVersion": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}