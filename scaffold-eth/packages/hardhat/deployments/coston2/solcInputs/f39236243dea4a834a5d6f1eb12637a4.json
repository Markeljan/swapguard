{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/MultiDEX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title MultiDEX\n * @dev A multi-token decentralized exchange (DEX) contract.\n */\ncontract MultiDEX is Ownable {\n    struct TokenInfo {\n        address token;\n        uint256 liquidity;\n    }\n    \n    mapping(address => TokenInfo) public tokenInfoMap;\n    address[] public supportedTokens;\n    \n    constructor() Ownable() {\n    }\n    \n    function addSupportedToken(address _token) public onlyOwner {\n        require(tokenInfoMap[_token].token == address(0), \"Token already supported\");\n        supportedTokens.push(_token);\n        tokenInfoMap[_token] = TokenInfo(_token, 0);\n    }\n    \n    function getTokensInContract(address _token) public view returns (uint256) {\n        return IERC20(_token).balanceOf(address(this));\n    }\n    \n    function addLiquidity(address _tokenA, address _tokenB, uint256 _amountA, uint256 _amountB) public {\n        require(tokenInfoMap[_tokenA].token != address(0) && tokenInfoMap[_tokenB].token != address(0), \"Tokens not supported\");\n        \n        TokenInfo storage tokenInfoA = tokenInfoMap[_tokenA];\n        TokenInfo storage tokenInfoB = tokenInfoMap[_tokenB];\n        \n        uint256 liquidityA;\n        uint256 liquidityB;\n        uint256 reserveA = getTokensInContract(_tokenA);\n        uint256 reserveB = getTokensInContract(_tokenB);\n        IERC20 tokenA = IERC20(_tokenA);\n        IERC20 tokenB = IERC20(_tokenB);\n        \n        if (reserveA == 0 || reserveB == 0) {\n            tokenA.transferFrom(msg.sender, address(this), _amountA);\n            tokenB.transferFrom(msg.sender, address(this), _amountB);\n            liquidityA = _amountA;\n            liquidityB = _amountB;\n        }\n        else {\n            require(\n                _amountA >= (_amountB * reserveA) / reserveB && _amountB >= (_amountA * reserveB) / reserveA,\n                \"Amount of tokens sent is less than the minimum tokens required\"\n            );\n            tokenA.transferFrom(msg.sender, address(this), _amountA);\n            tokenB.transferFrom(msg.sender, address(this), _amountB);\n            unchecked {\n                liquidityA = (tokenInfoA.liquidity * _amountA) / reserveA;\n                liquidityB = (tokenInfoB.liquidity * _amountB) / reserveB;\n            }\n        }\n        \n        tokenInfoA.liquidity += liquidityA;\n        tokenInfoB.liquidity += liquidityB;\n    }\n    \n    function removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity) public {\n        require(\n            _liquidity > 0, \"Liquidity should be greater than zero\"\n        );\n        require(tokenInfoMap[_tokenA].token != address(0) && tokenInfoMap[_tokenB].token != address(0), \"Tokens not supported\");\n        \n        TokenInfo storage tokenInfoA = tokenInfoMap[_tokenA];\n        TokenInfo storage tokenInfoB = tokenInfoMap[_tokenB];\n        \n        uint256 totalLiquidityA = tokenInfoA.liquidity;\n        uint256 totalLiquidityB = tokenInfoB.liquidity;\n        uint256 tokenAmountA = (getTokensInContract(_tokenA) * _liquidity) / totalLiquidityA;\n        uint256 tokenAmountB = (getTokensInContract(_tokenB) * _liquidity) / totalLiquidityB;\n        \n        tokenInfoA.liquidity -= _liquidity;\n        tokenInfoB.liquidity -= _liquidity;\n        \n        IERC20(_tokenA).transfer(msg.sender, tokenAmountA);\n        IERC20(_tokenB).transfer(msg.sender, tokenAmountB);\n    }\n    \n    function getAmountOfTokens(\n        uint256 inputAmount,\n        uint256 inputReserve,\n        uint256 outputReserve\n    )\n    public pure returns (uint256) \n    {\n        require(inputReserve > 0 && outputReserve > 0, \"Invalid Reserves\");\n        uint256 inputAmountWithFee = inputAmount;\n        uint256 numerator = inputAmountWithFee * outputReserve;\n        uint256 denominator = (inputReserve * 100) + inputAmountWithFee;\n        unchecked {\n            return numerator / denominator;\n        }\n    }\n    \n    function swapTokenToToken(address _tokenIn, address _tokenOut, uint256 _tokensSold) public {\n        require(tokenInfoMap[_tokenIn].token != address(0) && tokenInfoMap[_tokenOut].token != address(0), \"Tokens not supported\");\n        \n        uint256 _reservedTokensIn = getTokensInContract(_tokenIn);\n        uint256 _reservedTokensOut = getTokensInContract(_tokenOut);\n        uint256 _tokensBought = getAmountOfTokens(\n            _tokensSold, \n            _reservedTokensIn, \n            _reservedTokensOut\n        );\n        IERC20(_tokenIn).transferFrom(msg.sender, address(this), _tokensSold);\n        IERC20(_tokenOut).transfer(msg.sender, _tokensBought);\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}