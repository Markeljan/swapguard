{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/FrontRunner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMultiDEX {\n    function swapTokenToToken(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _tokensSold,\n        uint256 _expectedPriceUSD\n    ) external;\n}\n\ncontract FrontRunner {\n    IMultiDEX public multiDex;\n    IERC20 public tokenA;\n    IERC20 public tokenB;\n\n    constructor(address _multiDex, address _tokenA, address _tokenB) {\n        multiDex = IMultiDEX(_multiDex);\n        tokenA = IERC20(_tokenA);\n        tokenB = IERC20(_tokenB);\n    }\n\n    function manipulatePrice(uint256 _amountA) public {\n        // 1. Swap token A for token B to manipulate the price\n        tokenA.transferFrom(msg.sender, address(this), _amountA);\n        tokenA.approve(address(multiDex), _amountA);\n        multiDex.swapTokenToToken(address(tokenA), address(tokenB), _amountA, 0);\n    }\n\n    function completeFrontRun() public {\n        // 2. Perform the normal swap from token A to token B\n        uint256 amountA = tokenA.balanceOf(address(this));\n        tokenA.approve(address(multiDex), amountA);\n        multiDex.swapTokenToToken(address(tokenA), address(tokenB), amountA, 0);\n\n        // 3. Swap back token B to token A to revert the price\n        uint256 amountB = tokenB.balanceOf(address(this));\n        tokenB.approve(address(multiDex), amountB);\n        multiDex.swapTokenToToken(address(tokenB), address(tokenA), amountB, 0);\n    }\n}\n"
    },
    "contracts/FrontRunnerSim.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMultiDEX {\n    function swapTokenToToken(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _tokensSold,\n        uint256 _expectedPriceUSD\n    ) external;\n}\n\ncontract FrontRunner {\n    IMultiDEX public multiDex;\n    IERC20 public tokenA;\n    IERC20 public tokenB;\n\n    constructor(address _multiDex, address _tokenA, address _tokenB) {\n        multiDex = IMultiDEX(_multiDex);\n        tokenA = IERC20(_tokenA);\n        tokenB = IERC20(_tokenB);\n    }\n\n    function frontRunAttackSim(uint256 _amountA) public {\n        // 1. Swap token A for token B to manipulate the price\n        tokenA.transferFrom(msg.sender, address(this), _amountA);\n        tokenA.approve(address(multiDex), _amountA);\n        multiDex.swapTokenToToken(address(tokenA), address(tokenB), _amountA, 0);\n        \n        // 2. Perform the normal swap from token A to token B\n        uint256 amountA = tokenA.balanceOf(address(this));\n        tokenA.approve(address(multiDex), amountA);\n        multiDex.swapTokenToToken(address(tokenA), address(tokenB), amountA, 0);\n        \n        // 3. Swap back token B to token A to revert the price\n        uint256 amountB = tokenB.balanceOf(address(this));\n        tokenB.approve(address(multiDex), amountB);\n        multiDex.swapTokenToToken(address(tokenB), address(tokenA), amountB, 0);\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "london",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}